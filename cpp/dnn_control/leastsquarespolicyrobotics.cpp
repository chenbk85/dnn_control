#include "leastsquarespolicyrobotics.h"
#include "constants.h"
#include "vector.h"
#include "lspisimulator.h"
#include "filewriter.h"
#include "configuration.h"

#include <cfloat>
#include <eigen3/Eigen/Dense>
#include <map>
#include <boost/tuple/tuple.hpp>
#include <iomanip>


namespace eigen = Eigen;

static const double kSpacecraftMaximumThrust = 21.0;
static const unsigned int kSpacecraftStateDimension = 6;

static unsigned int kSpacecraftNumActions = 0;
static unsigned int kSpacecraftPolynomialDimensions = 0;
static unsigned int kSpacecraftPhiSize = 0;


// delta r, delta dot r
typedef boost::array<double, kSpacecraftStateDimension> LSPIState;

// (x, a, r, x_prime)
typedef boost::tuple<LSPIState, unsigned int, double, LSPIState> Sample;

static std::vector<Vector3D> kSpacecraftActions;

static void Init() {
    const double res_u = 1.0 / LSPR_DIRECTION_RESOLUTION ;
    const double res_v = 1.0 / (LSPR_DIRECTION_RESOLUTION - 1);
    const double d_thrust = kSpacecraftMaximumThrust / (LSPR_THRUST_RESOLUTION - 1);
    for (unsigned int k = 0; k < LSPR_THRUST_RESOLUTION; ++k) {
        if (k == 0) {
            kSpacecraftActions.push_back({0.0, 0.0, 0.0});
            continue;
        }
        const double t = k * d_thrust;
        for (unsigned int j = 0; j < LSPR_DIRECTION_RESOLUTION; ++j) {
            if (j == 0) {
                kSpacecraftActions.push_back({0.0, 0.0, -t});
                continue;
            } else if (j == LSPR_DIRECTION_RESOLUTION - 1) {
                kSpacecraftActions.push_back({0.0, 0.0, t});
                continue;
            }
            const double v = j * res_v;
            const double phi = acos(2.0 * v - 1.0);
            for (unsigned int i = 0; i < LSPR_DIRECTION_RESOLUTION; ++i) {
                const double u = i * res_u;
                const double theta = 2.0 * kPi * u;
                const Vector3D action = {t * sin(phi) * cos(theta), t * sin(phi) * sin(theta), t * cos(phi)};
                kSpacecraftActions.push_back(action);
            }
        }
    }
    kSpacecraftNumActions = kSpacecraftActions.size();
    kSpacecraftPolynomialDimensions = (int) (0.5 * kSpacecraftStateDimension * (kSpacecraftStateDimension + 3) + 1);
    kSpacecraftPhiSize = kSpacecraftNumActions * kSpacecraftPolynomialDimensions;
}

static eigen::VectorXd Phi(const LSPIState &state, const unsigned int &action) {
    eigen::VectorXd result = eigen::VectorXd(kSpacecraftPhiSize);
    result.setZero();
    unsigned int base = action * kSpacecraftPolynomialDimensions;

    result[base++] = 1.0;
    for (unsigned int i = 0; i < kSpacecraftStateDimension; ++i) {
        result[base++] = state[i];
        result[base++] = state[i] * state[i];
        for (unsigned int j = i+1; j < kSpacecraftStateDimension; ++j) {
            result[base++] = state[i] * state[j];
        }
    }

    return result;
}

static unsigned int Pi(SampleFactory &sample_factory, const LSPIState &state, const eigen::VectorXd &weights) {
    std::vector<unsigned int> best_a;
    double best_q = -DBL_MAX;
    for (unsigned int a = 0; a < kSpacecraftNumActions; ++a) {
        eigen::VectorXd  val_phi = Phi(state, a);
        eigen::VectorXd  val_phi_t = val_phi.transpose();

        double q = val_phi_t.dot(weights);
        if (q > best_q) {
            best_q = q;
            best_a.clear();
            best_a.push_back(a);
        } else if (q == best_q) {
            best_a.push_back(a);
        }
    }
    return best_a.at(sample_factory.SampleRandomInteger() % best_a.size());
}

static eigen::VectorXd LSTDQ(SampleFactory &sample_factory, const std::vector<Sample> &samples, const double &gamma, const eigen::VectorXd &weights) {
    eigen::MatrixXd matrix_A(kSpacecraftPhiSize, kSpacecraftPhiSize);
    matrix_A.setZero();
    eigen::VectorXd vector_b(kSpacecraftPhiSize);
    vector_b.setZero();

    for (unsigned int i = 0; i < samples.size(); ++i) {
        const Sample sample = samples.at(i);
        const LSPIState s = boost::get<0>(sample);
        const LSPIState s_prime = boost::get<3>(sample);
        const unsigned int a = boost::get<1>(sample);
        const double r = boost::get<2>(sample);

        const eigen::VectorXd phi_sa = Phi(s, a);
        const unsigned int a_prime = Pi(sample_factory, s_prime, weights);
        const eigen::VectorXd phi_sa_prime = Phi(s_prime, a_prime);

        matrix_A = matrix_A + phi_sa * (phi_sa - gamma * phi_sa_prime).transpose();
        vector_b = vector_b + r * phi_sa;
    }

    return matrix_A.inverse() * vector_b;
}

static eigen::VectorXd LSPI(SampleFactory &sample_factory, const std::vector<Sample> &samples, const double &gamma, const double &epsilon, const eigen::VectorXd &initial_weights) {
    eigen::VectorXd w_prime(initial_weights);
    eigen::VectorXd w;

    double val_norm = 0.0;
    unsigned int iteration = 0;
    do {
        w = w_prime;
        w_prime = LSTDQ(sample_factory, samples, gamma, w);
        val_norm = (w - w_prime).norm();

        time_t rawtime;
        struct tm *timeinfo;
        time(&rawtime);
        timeinfo = localtime(&rawtime);
        std::cout << std::endl << asctime(timeinfo) << "iteration " << ++iteration << ". Norm : " << val_norm << std::endl;
    } while (val_norm > epsilon);

    return w;
}

static LSPIState SystemStateToLSPIState(const SystemState &state, const Vector3D &target_position) {
    LSPIState lspi_state;

    const Vector3D position = {state[0], state[1], state[2]};
    const Vector3D velocity = {state[3], state[4], state[5]};

    for (unsigned int k = 0; k < 3; ++k) {
        lspi_state[k] = target_position[k] - position[k];
        lspi_state[3+k] = -velocity[k];
    }

    return lspi_state;
}

SystemState InitializeState(SampleFactory &sample_factory, const Vector3D &target_position, const bool &position_offset_enabled) {
    SystemState system_state;
    Vector3D position = target_position;
    if (position_offset_enabled) {
        for (unsigned int i = 0; i < 3; ++i) {
            position[i] += sample_factory.SampleUniform(- 3.0, 3.0);
        }
    }
    for (unsigned int i = 0; i < 3; ++i) {
        system_state[i] = position[i];
#if LSPR_IC_VELOCITY_TYPE == LSPR_IC_BODY_ZERO_VELOCITY
        system_state[i+3] = 0.0;
#else
        system_state[i+3] = sample_factory.SampleUniform(-0.3, 0.3);
#endif
    }
    system_state[6] = sample_factory.SampleUniform(450.0, 550.0);

    return system_state;
}

static std::vector<Sample> PrepareSamples(SampleFactory &sample_factory, const unsigned int &num_samples, const unsigned int &num_steps) {
    std::vector<Sample> samples;

    for (unsigned int i = 0; i < num_samples; ++i) {
#ifdef LSPR_FIXED_SEED
        LSPISimulator simulator(LSPR_FIXED_SEED);
        const Vector3D target_position = simulator.SampleFactoryOfSystem().SamplePointOutSideEllipsoid(simulator.AsteroidOfSystem().SemiAxis(), 1.1, 4.0);
#else
        LSPISimulator simulator(sample_factory.SampleRandomInteger());
        const Vector3D target_position = sample_factory.SamplePointOutSideEllipsoid(simulator.AsteroidOfSystem().SemiAxis(), 1.1, 4.0);
#endif
        const double dt = 1.0 / simulator.ControlFrequency();

        SystemState state = InitializeState(sample_factory, target_position, true);
        double time = sample_factory.SampleUniform(0.0, 12.0 * 60.0 * 60.0);

        for (unsigned int j = 0; j < num_steps; ++j) {
            const Vector3D position = {state[0], state[1], state[2]};
            const LSPIState lspi_state = SystemStateToLSPIState(state, target_position);

            const unsigned int a = sample_factory.SampleRandomInteger() % kSpacecraftNumActions;
            const Vector3D &thrust = kSpacecraftActions[a];
            const boost::tuple<SystemState, double, bool> result = simulator.NextState(state, time, thrust);
            const bool exception = boost::get<2>(result);
            if (exception) {
                break;
            }
            SystemState next_state = boost::get<0>(result);

            const Vector3D next_position = {next_state[0], next_state[1], next_state[2]};

            const LSPIState next_lspi_state = SystemStateToLSPIState(next_state, target_position);


            const double error_state = VectorNorm(VectorSub(target_position, position));
            const double error_next_state = VectorNorm(VectorSub(target_position, next_position));
            const double r = error_state - error_next_state;

            samples.push_back(boost::make_tuple(lspi_state, a, r, next_lspi_state));

            time += dt;
            state = next_state;
        }
    }
    return samples;
}


static boost::tuple<std::vector<double>, std::vector<double>, std::vector<Vector3D>, std::vector<Vector3D>, std::vector<Vector3D>, std::vector<Vector3D> > EvaluatePolicy(SampleFactory &sample_factory, const eigen::VectorXd &weights, LSPISimulator &simulator, const Vector3D &target_position, const unsigned int &num_steps) {
    std::vector<double> evaluated_times(num_steps + 1);
    std::vector<double> evaluated_masses(num_steps + 1);
    std::vector<Vector3D> evaluated_positions(num_steps + 1);
    std::vector<Vector3D> evaluated_heights(num_steps + 1);
    std::vector<Vector3D> evaluated_velocities(num_steps + 1);
    std::vector<Vector3D> evaluated_thrusts(num_steps + 1);

    Asteroid &asteroid = simulator.AsteroidOfSystem();
    const double dt = 1.0 / simulator.ControlFrequency();

    SystemState state = InitializeState(sample_factory, target_position, LSPR_IC_POSITION_OFFSET_ENABLED);
    state[6] = simulator.SpacecraftMaximumMass();
    double time = 0.0;

    Vector3D thrust = {0.0, 0.0, 0.0};

    unsigned int iteration;
    bool exception_thrown = false;
    double time_observer = 0.0;
    for (iteration = 0; iteration < num_steps; ++iteration) {
        const Vector3D &position = {state[0], state[1], state[2]};
        const Vector3D &velocity = {state[3], state[4], state[5]};
        const double &mass = state[6];

        const Vector3D surface_point = boost::get<0>(asteroid.NearestPointOnSurfaceToPosition(position));
        const Vector3D &height = {position[0] - surface_point[0], position[1] - surface_point[1], position[2] - surface_point[2]};


        const LSPIState lspi_state = SystemStateToLSPIState(state, target_position);

        thrust = kSpacecraftActions[Pi(sample_factory, lspi_state, weights)];

        evaluated_times.at(iteration) = time;
        evaluated_masses.at(iteration) = mass;
        evaluated_positions.at(iteration) = position;
        evaluated_heights.at(iteration) = height;
        evaluated_velocities.at(iteration) = velocity;
        evaluated_thrusts.at(iteration) = thrust;

        const boost::tuple<SystemState, double, bool> result  = simulator.NextState(state, time, thrust);
        const SystemState next_state = boost::get<0>(result);
        time_observer = boost::get<1>(result);
        exception_thrown = boost::get<2>(result);
        state = next_state;
        time += dt;
        if (exception_thrown) {
            std::cout << "spacecraft crash or out of fuel." << std::endl;
            break;
        }
    }
    if(exception_thrown) {
        const unsigned int new_size = iteration + 2;
        evaluated_times.resize(new_size);
        evaluated_masses.resize(new_size);
        evaluated_positions.resize(new_size);
        evaluated_velocities.resize(new_size);
        evaluated_heights.resize(new_size);
        evaluated_thrusts.resize(new_size);
    }

    const Vector3D &position = {state[0], state[1], state[2]};
    const Vector3D &velocity = {state[3], state[4], state[5]};
    const double &mass = state[6];

    const Vector3D surf_pos = boost::get<0>(asteroid.NearestPointOnSurfaceToPosition(position));
    const Vector3D &height = {position[0] - surf_pos[0], position[1] - surf_pos[1], position[2] - surf_pos[2]};

    evaluated_times.back() = time_observer;
    evaluated_masses.back() = mass;
    evaluated_positions.back() = position;
    evaluated_velocities.back() = velocity;
    evaluated_heights.back() = height;
    evaluated_thrusts.back() = thrust;

    return boost::make_tuple(evaluated_times, evaluated_masses, evaluated_positions, evaluated_heights, evaluated_velocities, evaluated_thrusts);
}

void TestLeastSquaresPolicyController(const unsigned int &random_seed) {
    Init();

    const double test_time = 24.0 * 60.0 * 60.0;

    LSPISimulator simulator(random_seed);
    SampleFactory &sample_factory = simulator.SampleFactoryOfSystem();
    const Vector3D target_position = sample_factory.SamplePointOutSideEllipsoid(simulator.AsteroidOfSystem().SemiAxis(), 1.1, 4.0);

    eigen::VectorXd weights(kSpacecraftPhiSize);
    weights << -0.3844181537, -0.006390387444, 0.01794220078, -0.002874678003, -0.0009238314644, -0.410246279, 0.06557727261, -0.005742004379, -0.007330685531, 0.02185695973, -0.005906687865, -0.0102266829, -0.5727748373, 0.06545395475, -0.006957073107, 0.02499067883, 0.06571063061, 0.03202712839, -0.6277183716, -0.02945176667, -3.980323, -0.1663833152, -0.4607567906, 0.01248281915, -2.21947672, -0.6924412494, 0.1068508451, -2.212208675, -0.3816750439, -0.007035931937, 0.01737260191, -0.003518447064, -0.0009024252891, -0.3817315469, 0.07775584963, -0.009244845187, -0.008427053721, 0.02140956291, -0.006782362124, 0.002867332936, -0.5392755595, 0.07705506181, -0.01257885525, 0.02490388971, 0.05473863718, 0.05696483086, -0.6130235139, -0.004299004565, -4.393685903, -0.380188289, -0.2526066222, 0.01928327793, -2.58810895, -1.068324193, 0.03227664368, -2.433450381, -0.3928512116, -0.002681785306, 0.01762529651, -0.003963829256, -0.0001126317876, -0.3912876927, 0.09625092707, -0.02456070278, -0.008316239082, 0.02188384959, -0.00659185296, 0.01556050625, -0.5635203122, 0.08498958737, -0.009572862327, 0.02487707082, 0.04058754605, 0.04149771252, -0.6205810469, 0.03976545978, -4.234509872, -0.7984474294, -0.003945574234, 0.03887464486, -2.318642733, -0.9599228008, 0.02336596216, -2.177359608, -0.3831275809, -0.00509854644, 0.0176895498, -0.002978687946, -0.0001695400774, -0.3957649641, 0.07010762298, -0.03286523534, -0.003502037332, 0.02157487859, -0.005676762958, -0.008936054448, -0.5533101447, 0.05027529987, -0.01101297626, 0.02513105879, 0.03844849644, 0.02357800753, -0.633222554, -0.04397923583, -4.148540154, -0.2037643311, 0.292283347, 0.04650600135, -2.55167974, -0.4059866044, 0.1056810974, -2.151705943, -0.3858749428, -0.008437386421, 0.01791460746, -0.003383585978, -0.0009704766921, -0.4044862151, 0.08327171517, -0.002349082424, -0.005892151771, 0.02143615792, -0.006236636775, -0.003880455133, -0.553854835, 0.07742028035, -0.009606203627, 0.02429448337, 0.05740796484, 0.03779213972, -0.5911246604, -0.1240533295, -4.029675801, -0.4581445146, -0.3707683007, 0.07085897597, -2.25816594, -0.8750110241, 0.04526463316, -2.643333887, -0.3827378102, -0.009081483155, 0.01777118683, -0.003158531493, -0.0001823891467, -0.3862784793, 0.06990597975, -0.03379582127, -0.009452696387, 0.02149603168, -0.005636894803, -0.00476068591, -0.5551028712, 0.05332782837, -0.01182815977, 0.02469637619, 0.04843490762, 0.02571673547, -0.6142151414, -0.06709484525, -4.424344138, -0.3664241791, 0.0791367114, -0.02997159634, -2.274882992, -0.4350266186, 0.1358207984, -2.418520481, -0.3877853325, -0.003300545307, 0.01806997006, -0.003948216102, -0.0004791867089, -0.4139581555, 0.08870627865, -0.01542300237, -0.01076762499, 0.02146261901, -0.006762169165, 0.01765659296, -0.5430812107, 0.07476801583, -0.01184115468, 0.02503669832, 0.04920259807, 0.05218932287, -0.6226414579, -0.04200661864, -3.954215113, -0.6989865625, -0.07362222201, -0.0683605468, -2.526363395, -0.8323271195, 0.1165326035, -2.363877985, -0.3889683422, -0.003614326762, 0.01759862772, -0.003522725914, -0.0006475428031, -0.3943971471, 0.0771491831, -0.01403142687, -0.00719075526, 0.02137404289, -0.006282070627, 0.006650583867, -0.5394944683, 0.07311822095, -0.007209933995, 0.02497442954, 0.04533525734, 0.04017539726, -0.6225180784, 0.06988270793, -4.117306534, -0.4440728888, 0.04328810924, 0.01871466321, -2.607671361, -0.8771450941, 0.08357444901, -2.349057885, -0.3811987491, -0.005546963671, 0.01713875243, -0.003454918828, -0.001547162982, -0.364110813, 0.08493064875, 0.002291722407, -0.004569909259, 0.02162625806, -0.005974814987, -0.01026254442, -0.5610850141, 0.07033514086, -0.007580044069, 0.02476516263, 0.07433004259, 0.03449483141, -0.6152058214, -0.009754948559, -4.578583952, -0.1633099302, -0.5587372839, 0.09499249866, -2.227308353, -0.9557949626, 0.1051600131, -2.374928966, -0.3710057506, -0.009705457873, 0.01724065413, -0.00321138849, -0.001123027579, -0.3716900436, 0.07298442719, 0.001265043567, -0.005934065408, 0.02135901121, -0.005823137708, -0.008236631686, -0.5400980955, 0.05791095364, -0.007212659959, 0.02402784014, 0.05570995663, 0.0251218059, -0.5693826007, -0.08186914081, -4.505393344, -0.1450103321, -0.3535659572, 0.06742144797, -2.680545273, -0.4189578219, 0.1048061344, -2.947982054, -0.3807238974, -0.006921271207, 0.01779307266, -0.003724580474, -0.0004263543362, -0.3913763409, 0.08872994811, -0.02360134941, -0.01054559749, 0.02135997051, -0.006535513733, 0.009863125709, -0.5385612782, 0.0720904592, -0.008892493349, 0.02486715908, 0.03896945962, 0.04521367786, -0.6165913899, -0.1477049136, -4.311612526, -0.6141141751, 0.2125127104, -0.04065995622, -2.671551529, -0.772826793, 0.1456678835, -2.388325164, -0.3852204285, -0.003340281976, 0.01725551764, -0.003072671739, -0.0003994817061, -0.3726914991, 0.07584608624, -0.02340040054, -0.01309358417, 0.02198664681, -0.00646489714, -0.00863640971, -0.5708589028, 0.06881165338, -0.007256560434, 0.02475821144, 0.04069796279, 0.04257489828, -0.6065321471, -0.01641637222, -4.413274771, -0.3426109524, 0.215787752, -0.0341357764, -2.374268256, -0.7014592256, 0.07108272929, -2.471502878, -0.3936644512, -0.003071504551, 0.01770501899, -0.003055198922, -0.0007730757132, -0.3953803319, 0.07461564742, -0.01828935938, -0.009428558385, 0.02167294085, -0.005608700609, -0.01056283437, -0.5676044914, 0.06292568647, -0.007566959726, 0.02485983212, 0.05466055479, 0.02311032951, -0.6232338605, 0.03955315864, -4.09427561, -0.2329356818, 0.02646231725, 0.07625280083, -2.163258605, -0.6037706414, 0.203321991, -2.267916312, -0.3844014838, -0.006137284651, 0.01792791317, -0.003209360826, -0.0002905311097, -0.4093129715, 0.07134798617, -0.03163044452, -0.006309596477, 0.02151403065, -0.005771361158, -0.009794346946, -0.5434025038, 0.06396142847, -0.003872104553, 0.02487515936, 0.04558311635, 0.03505813844, -0.6246028676, -0.001539497263, -4.002107797, -0.1304139147, 0.2209613289, 0.1122343358, -2.603756395, -0.8437129585, 0.1069322125, -2.256537895, -0.3947530082, -0.009106038743, 0.01772942251, -0.003359259586, -0.0006394117561, -0.3973340377, 0.08293736802, -0.01753611156, -0.007067843832, 0.02172194524, -0.006275013296, 0.001132422767, -0.5647650311, 0.07618947739, -0.003684654883, 0.02504298637, 0.05597148754, 0.03094354335, -0.6334543298, -0.0831488365, -4.14123765, -0.5184979467, -0.1513824788, 0.0686943869, -2.18615401, -0.6756714671, 0.08862414092, -1.998203547, -0.3918658816, -0.008644313999, 0.01804391851, -0.003732705352, -0.0009117516951, -0.417770531, 0.08769349651, -0.01243398088, -0.01116553518, 0.02166389166, -0.005996744906, 0.006697496835, -0.5562491794, 0.05630083755, -0.005951242289, 0.02451415175, 0.06246774203, 0.03577163004, -0.6024260285, -0.0710916006, -3.854265149, -0.5133789417, -0.3231842684, -0.02574178963, -2.374143442, -0.5911700889, 0.1910207414, -2.468036831, -0.3770531561, -0.005618751819, 0.01728661082, -0.002191327868, -0.0006878152811, -0.3779969497, 0.04505446637, -0.01533088082, -0.01336087315, 0.02177129724, -0.006275030731, -0.04352099976, -0.5589058604, 0.07618525897, -0.004686610631, 0.02476251519, 0.05863844448, 0.04325792143, -0.6129894043, 0.02091766377, -4.391391163, 0.6172092199, -0.3747515497, 0.009023830532, -2.442211351, -0.9545912985, 0.1378756298, -2.439752956, -0.3759863213, -0.006308038995, 0.01738142965, -0.003087187341, -0.00024678743, -0.3806951261, 0.06613089689, -0.02857029629, -0.009257534823, 0.02182698385, -0.006379395665, -0.004593884623, -0.5634636974, 0.07021903701, -0.002651247126, 0.02436026834, 0.03376235616, 0.04332171318, -0.5927677806, -0.01570386109, -4.324913511, -0.1577964405, 0.40705536, 0.05227157918, -2.403194427, -0.9862740092, 0.1952702697, -2.609659321, -0.3881351614, -0.00453456011, 0.01827927005, -0.003433253654, -0.0007952505788, -0.4176446309, 0.08095769277, -0.008572107789, -0.007424556641, 0.02114894121, -0.006264074804, -0.0004952936879, -0.534793216, 0.07187676008, -0.02067444214, 0.02515210107, 0.05094049593, 0.04033144083, -0.6282014493, -0.08084207022, -3.983307387, -0.3543727831, -0.145033799, 0.03890289508, -2.574783309, -0.8398957824, 0.00309089188, -2.221040198, -0.3855910432, 0.001113798932, 0.01792799872, -0.002768788562, -0.0004261720897, -0.4081989916, 0.06508410498, -0.0244879242, -0.007675326328, 0.0215397161, -0.005886795154, -0.01639269771, -0.5459906554, 0.06120643889, -0.01480360685, 0.0249010848, 0.04907682003, 0.02367436443, -0.6188593097, 0.09952156401, -4.081247162, 0.008424437438, 0.05474875617, 0.00777689757, -2.624488588, -0.5175060813, 0.04351499614, -2.30267084, -0.381322166, -0.005729332382, 0.01782032929, -0.004064230977, -0.0005375640129, -0.4011574486, 0.102115415, -0.01728184889, 0.000360374451, 0.02130200677, -0.006478478865, 0.01443225743, -0.5317002838, 0.06948308086, -0.01662086341, 0.0248091933, 0.04858052282, 0.05434089099, -0.6224894178, 0.01098934021, -4.205974947, -0.9279889143, -0.06523923666, 0.134068908, -2.756364126, -0.9624629563, 0.13485793, -2.174443684, -0.3913667749, -0.01095802504, 0.01829498486, -0.003313523056, -0.0007835980532, -0.4302738046, 0.07440941765, -0.00398032073, -0.002593943829, 0.02139775748, -0.005669903216, -0.008849291893, -0.5413052813, 0.04873898516, -0.01451348797, 0.02491404799, 0.05137483988, 0.02445266565, -0.6302335071, -0.1690849737, -3.731792132, -0.1700095346, -0.2271820776, 0.06676795862, -2.531534156, -0.3074401301, 0.1156140225, -2.158532462, -0.390419165, -0.01079542268, 0.01769893977, -0.002774570312, -0.0002350380072, -0.3905655765, 0.07054025045, -0.03169181097, -0.01222705564, 0.0213191955, -0.005973602133, -0.01376391978, -0.5439613485, 0.05698783409, -0.01053996856, 0.02453651871, 0.04747613672, 0.03167109774, -0.602046431, -0.1525397659, -4.285958032, -0.1761987213, 0.071718137, -0.09649644354, -2.470991278, -0.2879946766, 0.01779048692, -2.449290524, -0.3927712091, -0.003448078347, 0.01786912828, -0.002945338741, -0.0001907262324, -0.4104999889, 0.07110441362, -0.03274586982, -0.01462923503, 0.02169258235, -0.005329780371, -0.009359705483, -0.5607942881, 0.0521209178, -0.01358912245, 0.02435735125, 0.03877913863, 0.01361365067, -0.5896429499, 0.0314866887, -3.884666172, -0.2805140708, 0.3813713805, -0.08947031029, -2.242419684, -0.2071930476, 0.05816682615, -2.686374787, -0.3916785554, -0.0005647690748, 0.01809845166, -0.003489303, -0.001087073598, -0.4092029217, 0.07689279144, -0.009240317554, -0.008325961095, 0.02196224544, -0.005874140559, -0.004169872618, -0.5704340079, 0.05505138063, -0.008604021463, 0.02466006714, 0.05432788623, 0.03114509002, -0.6176329964, 0.1595947941, -4.086529566, -0.197533035, -0.1585573608, 0.04212760955, -2.199887925, -0.296572617, 0.1051494503, -2.232697082, -0.3914637485, -0.004306840097, 0.01792847886, -0.002532131954, -0.0008344613158, -0.4157555439, 0.05951875372, 0.004355849415, -0.0001285288636, 0.02212261519, -0.006163895132, -0.02088136492, -0.5858169885, 0.0658329044, -0.009147339568, 0.02463416451, 0.05349076281, 0.04283165472, -0.596970585, 0.01775884915, -3.897656584, 0.08338955747, -0.5079905549, 0.1826989737, -1.879193544, -0.7695669558, 0.1406613668, -2.76613973, -0.3836568458, -0.01252214965, 0.01733225446, -0.002750710423, -0.0006120182663, -0.3776142447, 0.06717056664, -0.02255333034, -0.002745374258, 0.02162464151, -0.006012766729, -0.01470323333, -0.5674399134, 0.06851698631, -0.007356869007, 0.02463279227, 0.05684865863, 0.03332911932, -0.6012327776, -0.1649816607, -4.319970042, -0.2072698773, -0.1032095414, 0.112349686, -2.137718588, -0.7641399416, 0.09564396773, -2.563990712, -0.3865570024, -0.01211062773, 0.01700790923, -0.002823720154, -0.0007014724801, -0.3636962057, 0.05992608154, -0.01752668145, -0.01388698923, 0.02139442303, -0.00598086152, -0.02429416828, -0.5445520102, 0.05520847238, -0.005635102936, 0.02467799175, 0.04332537602, 0.03569204584, -0.6042660337, -0.1384753865, -4.521005109, 0.4043245314, 0.1566893746, -0.0483988475, -2.41908748, -0.555437635, 0.08342741503, -2.563710124, -0.3854311163, -0.002598674176, 0.01806124871, -0.003730378434, -0.001123492246, -0.4120126754, 0.08067672885, -0.00878731242, -0.01940238551, 0.02176179706, -0.006356674852, 0.001772348072, -0.555922457, 0.07865991141, -0.007430909261, 0.02481902621, 0.06265248345, 0.04135383723, -0.6121189117, 0.03893787385, -4.014880388, -0.4226372144, -0.2217854078, -0.04813501685, -2.588926882, -0.9353139264, 0.1140247045, -2.509454128, -0.3974640065, -0.0005226817364, 0.01788040883, -0.003224853872, -0.001030456882, -0.4071604374, 0.07266989281, -0.003577181972, -0.008302683863, 0.02163564755, -0.006328014007, -0.006429860728, -0.5525466318, 0.06892617274, -0.002210302985, 0.02525103333, 0.07024435374, 0.04732051762, -0.6398846456, 0.1515762279, -4.018815245, -0.1517867193, -0.5409600968, 0.01346562523, -2.411943711, -1.020635967, 0.151027231, -2.016886406, -0.3847239684, -0.006927203476, 0.01721273534, -0.00264231837, -0.000940255779, -0.3772302855, 0.06031175627, -0.0125954335, 0.001481228642, 0.02141901005, -0.006380897509, -0.02247549337, -0.5473897225, 0.07665953, -0.002199584175, 0.02482545828, 0.06470667139, 0.04045413062, -0.6179337212, 0.07133734076, -4.280840216, 0.07253776125, -0.3507145734, 0.06094688143, -2.473717591, -0.8034109894, 0.1483230758, -2.305430265, -0.3937180132, -0.01410716585, 0.01773756824, -0.002722876955, -0.001218569672, -0.3957028177, 0.07433797512, -0.01245816501, -0.002667936221, 0.02164678066, -0.006231877094, -0.02945370939, -0.5615832004, 0.07076336734, -0.001658450382, 0.02494677267, 0.06654352993, 0.0376977641, -0.6139089476, -0.07474341588, -4.165643848, 0.08972314558, -0.1596044113, 0.07204077944, -2.280340255, -0.7973752801, 0.1826108776, -2.445360735, -0.3862173901, -0.01041236122, 0.01759829979, -0.002963828176, -0.0005114419736, -0.3924735605, 0.07245409588, -0.02489889254, -0.01361864946, 0.02186090939, -0.006005430573, -0.01790611915, -0.5694883413, 0.06583509506, -0.0006601521251, 0.02464058986, 0.04480397784, 0.02695304134, -0.6037940875, -0.1598853926, -4.256111193, -0.1080570426, 0.2056919146, -0.06176331756, -2.190705153, -0.4802230649, 0.1646123498, -2.532905425, -0.383849329, -0.001473123335, 0.01751960461, -0.003520963925, -0.00089536777, -0.3935967761, 0.08169173037, -0.002507324518, -0.01767860008, 0.02126867964, -0.00613732207, 0.005025452287, -0.5433021912, 0.06815851074, -0.001582976003, 0.0247150072, 0.05783884707, 0.03316527174, -0.6095089809, 0.0006146784768, -4.113091886, -0.5133341761, -0.4130552043, -0.06746369896, -2.406887816, -0.6318303548, 0.1599895447, -2.434255972, -0.3909472792, -0.005602162505, 0.01730958128, -0.002841512369, -0.0008709266806, -0.3799453109, 0.06092913715, -0.008669496114, -0.008091716572, 0.0216293093, -0.006445758728, -0.01623432325, -0.5538339632, 0.07395128592, 0.004035219917, 0.02512880637, 0.04545176737, 0.04679819408, -0.6320379922, -0.03536708747, -4.33662963, 0.06419937919, 0.1045923313, -0.01298998264, -2.353700532, -0.8958024874, 0.162849157, -2.196536542, -0.3846403463, -0.005144170186, 0.01785604011, -0.003241342988, -0.0003945701547, -0.4049110882, 0.0775475039, -0.03136305299, -0.005297995153, 0.02145396872, -0.006424848053, -0.004941664445, -0.5463308098, 0.06890180615, -0.0283671013, 0.02538012391, 0.04284244957, 0.03782583883, -0.6429246763, -0.07137001562, -4.029581469, -0.2693155478, 0.4543278178, -0.04191718408, -2.657945419, -0.6227126646, 0.0332328086, -2.14774572, -0.3968744321, 0.004893939646, 0.01814217329, -0.002934023196, -0.000483242995, -0.4237639411, 0.06819895073, -0.01707744586, -0.006778710764, 0.021704893, -0.005688546493, -0.01256655233, -0.5587679832, 0.06078117643, -0.01913774759, 0.02459020824, 0.04514487601, 0.01767149308, -0.6122941374, 0.1583401551, -3.784589368, -0.1023601999, 0.009779711379, 0.01255053817, -2.275899754, -0.3754045354, 0.07452490498, -2.22502042, -0.388712374, -0.005979929019, 0.01771446629, -0.003467230021, -0.0007152758021, -0.4018078751, 0.08425345703, -0.01160637792, 0.005662726783, 0.02189832217, -0.005296118307, -0.002863158496, -0.5718053822, 0.03794768521, -0.01842577686, 0.02475301623, 0.05294738439, 0.02584440871, -0.6097185253, 0.07186374518, -4.112336665, -0.4235324095, -0.08954594996, 0.1390572033, -2.143236106, -0.2593359546, 0.09911517745, -2.370425125, -0.3916276644, -0.01720790082, 0.01754676098, -0.003576937664, -0.0006579046306, -0.3923273311, 0.08237403638, -0.008331719831, 0.001245367123, 0.02151351007, -0.005814314536, 0.002884359918, -0.543343283, 0.05917893975, -0.01563108956, 0.02536442746, 0.04930868037, 0.02130906224, -0.6480695217, -0.1642020236, -4.208745687, -0.4793823627, -0.3088765908, 0.07481952574, -2.632410182, -0.3729205664, 0.01676250082, -1.773989838, -0.3905021364, -0.01314029751, 0.01818116854, -0.004008296387, -0.0003769411286, -0.4232198984, 0.08477548568, -0.02820711839, -0.01714749906, 0.0215671053, -0.006097351086, 0.02467980861, -0.5495292096, 0.05879931206, -0.01473534322, 0.02484577099, 0.04079295693, 0.03961797837, -0.6239238038, -0.212074092, -3.761031814, -0.8019011411, 0.3749376858, -0.0587653982, -2.54101109, -0.5305736479, 0.02861415704, -2.218754897, -0.3801289777, -0.001806923992, 0.01789409367, -0.002898352547, -0.002079510829, -0.4040244817, 0.07043387631, 0.03015851269, -0.02042773404, 0.02103853869, -0.006078910589, -0.01479950755, -0.5272193924, 0.06285458369, -0.01662081328, 0.02499054256, 0.08080228442, 0.03998910485, -0.6234819144, 0.05400272217, -4.091216125, -0.06082565693, -1.070780732, -0.142667291, -2.764664339, -0.8112870355, 0.0307944749, -2.369608885, -0.3929057575, 0.002849601608, 0.01733636119, -0.003415872943, -0.0007492676818, -0.3738587993, 0.08539585446, -0.007344232718, -0.008407003037, 0.02170495645, -0.005874036603, 0.008647232758, -0.5564417436, 0.06002332085, -0.009826943799, 0.0248350845, 0.05373250126, 0.02243202284, -0.6116100872, 0.2809935808, -4.406361238, -0.6991452675, -0.3056364082, 0.02223177929, -2.460590292, -0.2974425607, 0.1075925733, -2.376028997, -0.3971072751, -0.004106779051, 0.01762904083, -0.002721383826, -0.0008837330293, -0.3951659153, 0.0638273183, -0.008449558524, 0.007852201672, 0.02202392808, -0.006549159424, -0.02092169696, -0.5836330401, 0.08126449517, -0.007921954679, 0.02417581959, 0.06441108771, 0.04871049666, -0.5776772687, 0.05144039312, -4.080024919, 0.09182878418, -0.4692765388, 0.1620569528, -1.958356846, -1.143764098, 0.08303718692, -2.814184228, -0.3898591272, -0.01585657196, 0.01766641709, -0.00340576025, -0.0003473119558, -0.3911167613, 0.08231302442, -0.02684950616, 0.002097373725, 0.0217184436, -0.006441246409, -0.002676543753, -0.5674503358, 0.07145173848, -0.006395026573, 0.02493082852, 0.05046948133, 0.0535429476, -0.6185477709, -0.2435317205, -4.245078793, -0.4693484688, 0.09909475145, 0.07213177709, -2.179227187, -1.118187952, 0.1223421884, -2.394056223, -0.3910809859, -0.01294911912, 0.01749765048, -0.003608170531, -0.001464844975, -0.3897142526, 0.08200731739, 0.004753797379, -0.02016121327, 0.02150155157, -0.005982239805, -0.006234679052, -0.5518115313, 0.06620538821, -0.005649065768, 0.02486774663, 0.05915913958, 0.03139681629, -0.6236067977, -0.2685799552, -4.174907666, -0.1817093573, -0.2723686862, -0.005299589008, -2.346311479, -0.6033309756, 0.0959736803, -2.220569032, -0.3792018448, -0.001070026426, 0.01733492692, -0.003831280356, -0.000414868072, -0.3814792001, 0.09347660898, -0.02460378613, -0.02268169274, 0.02174235516, -0.006297904841, 0.004285202311, -0.5618029204, 0.06129042323, -0.005220546709, 0.02423880261, 0.04689490949, 0.04418124053, -0.5826272012, 0.05103399392, -4.357390663, -0.6302749091, 0.001529387746, -0.1372645844, -2.341049677, -0.5802717173, 0.04018648821, -2.748070782, -0.3975631551, 0.003984634203, 0.01778393289, -0.003461342277, -0.0007005548363, -0.3982469065, 0.07533668342, -0.007657766285, -0.007063811453, 0.02208789025, -0.005478411856, -0.009960271317, -0.5772799906, 0.04375991197, -0.00107547822, 0.02460258927, 0.04885669841, 0.02289256569, -0.6080494395, 0.196315011, -4.171394657, 0.005454744594, -0.1215997992, -0.004726036873, -2.099264895, -0.2678627249, 0.2259514548, -2.425468972, -0.3878852855, -0.005728580249, 0.01774301486, -0.003287546763, -0.001116465983, -0.3939828586, 0.07378510472, -0.006213338372, 0.004501512066, 0.02144934596, -0.005693532945, -0.0008748297606, -0.5543636665, 0.0486691335, 0.002336580992, 0.02489147785, 0.06889958246, 0.02648189587, -0.6239136496, 0.06562475086, -4.200848816, -0.4046722312, -0.3430772865, 0.1515091792, -2.33563037, -0.3124469734, 0.1625940093, -2.225368664, -0.4046955428, -0.01679726821, 0.0183016313, -0.003188549217, -0.0007710171427, -0.4241530888, 0.07417948372, -0.008351087606, 0.000651944677, 0.02207736357, -0.006539736099, -0.01199770629, -0.584459684, 0.08073892471, 0.0007555407351, 0.02504457655, 0.05307896583, 0.04980811963, -0.629411395, -0.1599935127, -3.809576322, -0.13154722, -0.3873749474, 0.0695387012, -1.904364499, -1.212756306, 0.2463605794, -2.21103964, -0.3918546257, -0.011969715, 0.01814522581, -0.003119600459, -0.0009462367665, -0.4188075701, 0.07301792824, -0.02146834829, -0.01688653475, 0.02165398815, -0.006078819338, -0.009557577782, -0.5589830338, 0.071070962, 0.001626943756, 0.0245918702, 0.05981651746, 0.03144182241, -0.6122265845, -0.2334653299, -3.935043879, -0.07718541405, -0.1007962188, -0.05942908509, -2.185135818, -0.5427859812, 0.1921908595, -2.382562391, -0.3801953503, -0.001827539236, 0.01744492302, -0.003859844888, -1.026233701e-05, -0.3805303252, 0.08616475289, -0.03662020507, -0.02289363026, 0.02130673388, -0.006165399157, 0.01029158118, -0.5406521919, 0.06607931551, 0.0009851911877, 0.02451383991, 0.02973796321, 0.04141015181, -0.5900182993, 0.04954238774, -4.337704069, -0.5251051378, 0.5076964375, -0.07790582809, -2.545586173, -0.857473776, 0.2047911041, -2.930728745, -0.3942351686, -0.006132460616, 0.01772726748, -0.003340026385, -0.0006064234745, -0.3921311614, 0.07416807694, -0.009564877664, -0.00993241277, 0.02180921638, -0.006273785278, -0.004929759978, -0.5674556679, 0.07279377074, 0.01100824842, 0.02500592425, 0.05574808415, 0.03405809132, -0.6276618528, 0.01149884849, -4.247909798, -0.1264564757, -0.4990329282, 0.0358085509, -2.213191922, -0.6444810357, 0.2526852655, -2.187890806, -0.3783511925, -0.007269522552, 0.017804607, -0.003540808134, -0.001392966129, -0.393921562, 0.06980733164, 0.01102851621, -0.005583983854, 0.02126175923, -0.005432459285, 0.001339838644, -0.5359148684, 0.04195702636, -0.03321407696, 0.02473516915, 0.0564687869, 0.01480398726, -0.6038254442, -0.007053092006, -4.280720981, -0.1204741369, -0.3582524595, -0.008345105539, -2.760455443, -0.07632716272, -0.0439998695, -2.56517438, -0.3858682983, 0.007448291065, 0.01769478336, -0.003236556643, -0.0001756102054, -0.399462561, 0.07130454484, -0.03416602075, -0.005743315353, 0.02119508315, -0.006161360537, -0.007394089772, -0.5278145439, 0.06272973977, -0.01999367724, 0.02457107003, 0.04574784866, 0.041132489, -0.6023666977, 0.2304802601, -4.109858198, -0.09800002514, 0.2317805985, -0.002200676863, -2.730949902, -0.6732294821, -0.0233297657, -2.552022816, -0.3834697087, -0.004587176579, 0.01774857126, -0.002909578442, -2.506850521e-05, -0.400006748, 0.06401647869, -0.03654498246, 0.01020453512, 0.02165022594, -0.005963004678, -0.01638687713, -0.5531629554, 0.06503931207, -0.02147957127, 0.02474314517, 0.04247738679, 0.03257183016, -0.6050591303, 0.07905833928, -4.046259509, 0.03833400157, 0.2301543787, 0.190681308, -2.540425648, -0.6534614878, 0.04661932968, -2.69257778, -0.3901630755, -0.01952854905, 0.01806308162, -0.002624142162, -0.0003028171819, -0.4132600417, 0.06895382928, -0.02957025413, 0.004225044366, 0.02158993952, -0.006001099221, -0.01920888226, -0.5586758585, 0.06550909917, -0.01817466456, 0.02447565278, 0.04447071272, 0.03907107449, -0.5881445289, -0.2186893186, -4.018432025, -0.1438155177, 0.1049363365, 0.1120027052, -2.374592301, -0.8644502624, 0.005501775758, -2.725536149, -0.3804702185, -0.01550706045, 0.01736625166, -0.002563983459, -0.000907800797, -0.3790157796, 0.05390954645, -0.007700566277, -0.01724291883, 0.02157324388, -0.006113054435, -0.0222400987, -0.5574601766, 0.07083427475, -0.01807912628, 0.02458394523, 0.05809823102, 0.03161185239, -0.5958265976, -0.303266236, -4.443209612, 0.3857284115, -0.2809160039, -0.1173294154, -2.345557528, -0.6091449871, -0.01576870847, -2.648914709, -0.3795662047, -0.001931273654, 0.01748779041, -0.003550076349, -0.001283208082, -0.3742400316, 0.08198223719, 0.0007901432672, -0.02344032069, 0.02115246966, -0.005661392901, 0.004105489902, -0.5359520958, 0.04345144913, -0.0191117484, 0.02435651399, 0.06422558295, 0.03301904623, -0.5920345295, 0.09419366466, -4.480355309, -0.540316885, -0.4341497537, -0.1867716664, -2.655122211, -0.4472010452, -0.04186984027, -2.695127695, -0.397898245, 0.009604457304, 0.0177761811, -0.003148807777, -0.001355397942, -0.4059092614, 0.07417935377, -0.007050389582, -0.007800351272, 0.02120068932, -0.006600378385, -0.009038747074, -0.5337657891, 0.0852849244, -0.01127921114, 0.02508917937, 0.07378474547, 0.05466173378, -0.6289907141, 0.2807324459, -3.944900503, -0.1692635392, -0.4832321457, 0.008053594704, -2.636591938, -1.229655098, 0.1546963244, -2.151300889, -0.3858226228, -0.004476206674, 0.01754625752, -0.003306936534, -0.0007373869972, -0.3855791212, 0.07932548658, -0.023778924, 0.01330262351, 0.02115478579, -0.006012245658, -0.006835980978, -0.5369521671, 0.0642224317, -0.008682297775, 0.02480648962, 0.05734004283, 0.02874883789, -0.6131782484, 0.09523968072, -4.305680908, -0.1747614075, 0.002466932704, 0.2115999225, -2.54453676, -0.4309281775, 0.1207567027, -2.453340216, -0.3891669535, -0.02128926409, 0.01761461683, -0.003285907317, -0.0001771466114, -0.3929330199, 0.07712862992, -0.02848083361, 0.004813094177, 0.0210373895, -0.006382262113, -0.006110420321, -0.5273201341, 0.07898669173, -0.007341966875, 0.02458768997, 0.04293158415, 0.03886416533, -0.6040708273, -0.2799809108, -4.239634253, -0.2929245667, 0.1844915562, 0.1391359901, -2.612132943, -0.871755012, 0.1467748026, -2.436841515, -0.3875774647, -0.01649002166, 0.01747887867, -0.002633446525, -0.0007689995326, -0.3789557186, 0.06008411649, -0.02055047214, -0.02102618758, 0.02122204201, -0.005819070918, -0.03068556953, -0.539505613, 0.05252286144, -0.004462786329, 0.02440502707, 0.06381211414, 0.02643423824, -0.5964061779, -0.2978704135, -4.352196341, 0.4258291373, -0.3690004176, -0.1161999898, -2.539429126, -0.3236755548, 0.03767522371, -2.618575996, -0.3911348461, 0.0006995777672, 0.01741502778, -0.003392616986, -0.000381620745, -0.3819971889, 0.07570276215, -0.03549073845, -0.02810044974, 0.02164007811, -0.006924682353, -0.008642252539, -0.5525709835, 0.08045727484, -0.004576579945, 0.025157987, 0.05322712366, 0.05885007028, -0.6270608353, 0.08452412165, -4.297348608, -0.1636858151, -0.01507248165, -0.1782067627, -2.528115711, -1.222339322, 0.03606326883, -2.236827306, -0.3972951282, 0.007251826837, 0.01785199552, -0.003754582711, -0.0009469942113, -0.3970520964, 0.08964641728, -0.009101923302, -0.008252304526, 0.02145380426, -0.006173466686, 0.001641209147, -0.5544100299, 0.06972646137, 0.001959819458, 0.0247097925, 0.04783780482, 0.02830812641, -0.6038116861, 0.2684306328, -4.238891145, -0.5034616631, 0.02771489914, -0.005912556792, -2.203622703, -0.6049723171, 0.2564798124, -2.550034011, -0.4002135577, -0.005152326766, 0.01766256651, -0.003041218039, -0.00129092269, -0.3965667274, 0.07035131868, 0.003828749851, 0.007196996946, 0.02165329395, -0.005913950226, -0.01693964644, -0.5645331691, 0.05764170322, 9.514245139e-05, 0.02507520053, 0.05913232337, 0.03209587102, -0.6285475373, 0.09399502521, -4.101823978, 0.07040117078, -0.2614098125, 0.2395460692, -2.065982471, -0.5777424146, 0.3112686838, -2.274910967, -0.3886767313, -0.01809821134, 0.0173714801, -0.004120568026, -0.0005796163154, -0.3831516528, 0.09959671064, -0.01244609298, 0.002587599449, 0.02144693544, -0.006127222259, 0.01876937982, -0.5393137015, 0.0629647257, 0.00425026247, 0.02484917243, 0.05219616696, 0.03304180751, -0.6116812736, -0.2581388068, -4.382745042, -0.8985567995, -0.2324396805, 0.08360412978, -2.58318694, -0.6819098465, 0.2505942388, -2.395598515, -0.3943009615, -0.01822821953, 0.01765526811, -0.003344722617, -0.0008238886865, -0.3891253433, 0.08371639038, -0.01180112405, -0.02119117066, 0.02132181135, -0.005865374537, -0.005893429243, -0.5359382084, 0.04955999127, 0.007647726828, 0.02479937913, 0.05546349746, 0.02874396459, -0.6175159841, -0.2046191814, -4.248499706, -0.5025065501, -0.1538063048, -0.08075908137, -2.684971899, -0.2132820199, 0.1803941865, -2.341207087, -0.3947148898, -0.001981434176, 0.01788869624, -0.003561442772, -0.0005146648166, -0.4076409811, 0.08667543186, -0.02062554916, -0.02517983767, 0.02166737449, -0.006580609976, -0.001729981766, -0.56681946, 0.07999351876, 0.005734764841, 0.02466588274, 0.04203718579, 0.04716309407, -0.6045979039, 0.1117135714, -4.062711548, -0.5126801269, 0.1798018001, -0.1890086906, -2.043317159, -0.9269544698, 0.1721992599, -2.549061942, -0.3884604304, -0.004859202162, 0.01732157443, -0.003203643593, -0.0009272634126, -0.3803725284, 0.07521433325, -0.01033522996, -0.01114355033, 0.02129930968, -0.005976121136, -0.0055093079, -0.5428056193, 0.05863100096, 0.01484109411, 0.02501401251, 0.06163124331, 0.03394892847, -0.6233839942, -0.04757163613, -4.340159768, -0.2577471776, -0.3863231982, 0.06517759076, -2.475928916, -0.5816990446, 0.3437026239, -2.305400212;



    std::cout << "Simulating LSPI controller ... ";
    const boost::tuple<std::vector<double>, std::vector<double>, std::vector<Vector3D>, std::vector<Vector3D>, std::vector<Vector3D>, std::vector<Vector3D> > result = EvaluatePolicy(sample_factory, weights, simulator, target_position, test_time * simulator.ControlFrequency());
    const std::vector<double> &times = boost::get<0>(result);
    const std::vector<Vector3D> &positions = boost::get<2>(result);
    const std::vector<Vector3D> &heights = boost::get<3>(result);
    const std::vector<Vector3D> &velocities = boost::get<4>(result);
    const std::vector<Vector3D> &thrusts = boost::get<5>(result);
    std::cout << "done." << std::endl;

    std::cout << "Writing visualization file ... ";
    FileWriter writer_visualization(PATH_TO_LSPI_TRAJECTORY_FILE);
    writer_visualization.CreateVisualizationFile(simulator.ControlFrequency(), simulator.AsteroidOfSystem(), positions, heights);
    std::cout << "done." << std::endl;

    std::cout << "Writing evaluation file ... ";
    FileWriter writer_evaluation(PATH_TO_LSPI_EVALUATION_FILE);
    writer_evaluation.CreateEvaluationFile(random_seed, target_position, times, positions, velocities, thrusts);
    std::cout << "done." << std::endl;
}

void TrainLeastSquaresPolicyController() {
    std::cout << "Initializing LSPI controller learning .... ";
    Init();

#if LSPR_WRITE_ACTION_SET_TO_FILE
    FileWriter writer(PATH_TO_LSPI_ACTION_SET_FILE);
    writer.CreateActionSetFile(kSpacecraftActions);
#endif

    const unsigned int num_samples = LSPR_NUM_EPISODES;
    const unsigned int num_steps = LSPR_NUM_STEPS;

    const double gamma = LSPR_GAMMA;
    const double epsilon = LSPR_EPSILON;

    SampleFactory sample_factory(rand());

    const std::vector<Sample> samples = PrepareSamples(sample_factory, num_samples, num_steps);

    std::cout << std::setprecision(10);

    std::cout << "collected " << samples.size() << " samples." << std::endl;

    eigen::VectorXd weights(kSpacecraftPhiSize);
    weights.setZero();
    weights = LSPI(sample_factory, samples, gamma, epsilon, weights);

    std::cout << "solution:" << std::endl << "<< ";
    for (unsigned int i = 0; i < weights.rows() - 1; ++i) {
        std::cout << weights[i] << ", ";
    }
    std::cout << weights[weights.rows()-1] << ";" << std::endl;
}
